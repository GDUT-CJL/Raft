// protoc --go_out=. --go-grpc_out=. raft_grpc.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: raft_grpc.proto

package raft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RaftGrpc_Grpc_RequestVote_FullMethodName     = "/RaftGrpc/Grpc_RequestVote"
	RaftGrpc_Grpc_AppendEntries_FullMethodName   = "/RaftGrpc/Grpc_AppendEntries"
	RaftGrpc_Grpc_InstallSnapshot_FullMethodName = "/RaftGrpc/Grpc_InstallSnapshot"
)

// RaftGrpcClient is the client API for RaftGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftGrpcClient interface {
	Grpc_RequestVote(ctx context.Context, in *G_RequestVoteArgs, opts ...grpc.CallOption) (*G_RequestVoteReply, error)
	Grpc_AppendEntries(ctx context.Context, in *G_AppendEntriesArgs, opts ...grpc.CallOption) (*G_AppendEntriesReply, error)
	Grpc_InstallSnapshot(ctx context.Context, in *G_InstallSnapshotArgs, opts ...grpc.CallOption) (*G_InstallSnapshotReply, error)
}

type raftGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftGrpcClient(cc grpc.ClientConnInterface) RaftGrpcClient {
	return &raftGrpcClient{cc}
}

func (c *raftGrpcClient) Grpc_RequestVote(ctx context.Context, in *G_RequestVoteArgs, opts ...grpc.CallOption) (*G_RequestVoteReply, error) {
	out := new(G_RequestVoteReply)
	err := c.cc.Invoke(ctx, RaftGrpc_Grpc_RequestVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftGrpcClient) Grpc_AppendEntries(ctx context.Context, in *G_AppendEntriesArgs, opts ...grpc.CallOption) (*G_AppendEntriesReply, error) {
	out := new(G_AppendEntriesReply)
	err := c.cc.Invoke(ctx, RaftGrpc_Grpc_AppendEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftGrpcClient) Grpc_InstallSnapshot(ctx context.Context, in *G_InstallSnapshotArgs, opts ...grpc.CallOption) (*G_InstallSnapshotReply, error) {
	out := new(G_InstallSnapshotReply)
	err := c.cc.Invoke(ctx, RaftGrpc_Grpc_InstallSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftGrpcServer is the server API for RaftGrpc service.
// All implementations must embed UnimplementedRaftGrpcServer
// for forward compatibility
type RaftGrpcServer interface {
	Grpc_RequestVote(context.Context, *G_RequestVoteArgs) (*G_RequestVoteReply, error)
	Grpc_AppendEntries(context.Context, *G_AppendEntriesArgs) (*G_AppendEntriesReply, error)
	Grpc_InstallSnapshot(context.Context, *G_InstallSnapshotArgs) (*G_InstallSnapshotReply, error)
	mustEmbedUnimplementedRaftGrpcServer()
}

// UnimplementedRaftGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedRaftGrpcServer struct {
}

func (UnimplementedRaftGrpcServer) Grpc_RequestVote(context.Context, *G_RequestVoteArgs) (*G_RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grpc_RequestVote not implemented")
}
func (UnimplementedRaftGrpcServer) Grpc_AppendEntries(context.Context, *G_AppendEntriesArgs) (*G_AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grpc_AppendEntries not implemented")
}
func (UnimplementedRaftGrpcServer) Grpc_InstallSnapshot(context.Context, *G_InstallSnapshotArgs) (*G_InstallSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grpc_InstallSnapshot not implemented")
}
func (UnimplementedRaftGrpcServer) mustEmbedUnimplementedRaftGrpcServer() {}

// UnsafeRaftGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftGrpcServer will
// result in compilation errors.
type UnsafeRaftGrpcServer interface {
	mustEmbedUnimplementedRaftGrpcServer()
}

func RegisterRaftGrpcServer(s grpc.ServiceRegistrar, srv RaftGrpcServer) {
	s.RegisterService(&RaftGrpc_ServiceDesc, srv)
}

func _RaftGrpc_Grpc_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(G_RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftGrpcServer).Grpc_RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftGrpc_Grpc_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftGrpcServer).Grpc_RequestVote(ctx, req.(*G_RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftGrpc_Grpc_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(G_AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftGrpcServer).Grpc_AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftGrpc_Grpc_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftGrpcServer).Grpc_AppendEntries(ctx, req.(*G_AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftGrpc_Grpc_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(G_InstallSnapshotArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftGrpcServer).Grpc_InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftGrpc_Grpc_InstallSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftGrpcServer).Grpc_InstallSnapshot(ctx, req.(*G_InstallSnapshotArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftGrpc_ServiceDesc is the grpc.ServiceDesc for RaftGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RaftGrpc",
	HandlerType: (*RaftGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grpc_RequestVote",
			Handler:    _RaftGrpc_Grpc_RequestVote_Handler,
		},
		{
			MethodName: "Grpc_AppendEntries",
			Handler:    _RaftGrpc_Grpc_AppendEntries_Handler,
		},
		{
			MethodName: "Grpc_InstallSnapshot",
			Handler:    _RaftGrpc_Grpc_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft_grpc.proto",
}
